/* Task 16 - sort */
@import "103-sort_list";

$ascii-hex-table: "\00", "\01", "\02", "\03", "\04", "\05", "\06", "\07", "\08",
  "\09", "\0A", "\0B", "\0C", "\0D", "\0E", "\0F", "\10", "\11", "\12", "\13",
  "\14", "\15", "\16", "\17", "\18", "\19", "\1A", "\1B", "\1C", "\1D", "\1E",
  "\1F", "\20", "\21", "\22", "\23", "\24", "\25", "\26", "\27", "\28", "\29",
  "\2A", "\2B", "\2C", "\2D", "\2E", "\2F", "\30", "\31", "\32", "\33", "\34",
  "\35", "\36", "\37", "\38", "\39", "\3A", "\3B", "\3C", "\3D", "\3E", "\3F",
  "\40", "\41", "\42", "\43", "\44", "\45", "\46", "\47", "\48", "\49", "\4A",
  "\4B", "\4C", "\4D", "\4E", "\4F", "\50", "\51", "\52", "\53", "\54", "\55",
  "\56", "\57", "\58", "\59", "\5A", "\5B", "\5C", "\5D", "\5E", "\5F", "\60",
  "\61", "\62", "\63", "\64", "\65", "\66", "\67", "\68", "\69", "\6A", "\6B",
  "\6C", "\6D", "\6E", "\6F", "\70", "\71", "\72", "\73", "\74", "\75", "\76",
  "\77", "\78", "\79", "\7A", "\7B", "\7C", "\7D", "\7E", "\7F";

// strcmp - Compares two strings outputing an integer.
// Description: compares two strings. Its output, being an integer,
//              shows the numerical difference based on the comparison scheme
//              passed as argument in string1 and string2.
//              If 0, then both strings are equal. If positive, then the
//              character being compared from string1 is greater than string2,
//              negative if otherwise.
// $string1: the source string.
// $string2: the string it will be compared to.
// $compare-scheme: the comparison scheme list.
// @return: an integer.
@function strcmp($string1, $string2, $compare-scheme) {
  $compare: 0;
  @for $idx from 1 through min(str-length($string1), str-length($string2)) {
    @if $compare == 0 {
      $char-string1: str-slice($string1, $idx, $idx);
      $char-string2: str-slice($string2, $idx, $idx);
      $compare: index($compare-scheme, $char-string1) -
        index($compare-scheme, $char-string2);
    } @else {
      @return $compare;
    }
  }
  @if str-length($string1) > str-length($string2) {
    @return 1;
  } @else if str-length($string1) < str-length($string2) {
    @return -1;
  }
  @return 0;
}

// quicksort - Quicksort algorithm using random partition.
// Description: quicksort implementation using two auxiliary lists, left and
//              right, since lists in SASS are immutable.
// $list: the list to be sorted.
// $compare-scheme: the comparison scheme to be used.
// @return: the sorted list.
@function quicksort($list, $compare-scheme) {
  @if length($list) > 1 {
    $left: ();
    $right: ();
    $pivot: nth($list, random(length($list)));
    @each $string in $list {
      @if strcmp($string, $pivot, $compare-scheme) <= 0 {
        $left: append($left, $string);
      } @else {
        $right: append($right, $string);
      }
    }
    @return join(
      quicksort($left, $compare-scheme),
      quicksort($right, $compare-scheme)
    );
  }
  @return $list;
}

@debug quicksort($list_to_sort, $ascii-hex-table);
